// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::deployable_collectible_state_v_2_type::DeployableCollectibleStateV2;
use super::offset_coordinates_small_message_type::OffsetCoordinatesSmallMessage;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `deployable_collectible_state_v2`.
///
/// Obtain a handle from the [`DeployableCollectibleStateV2TableAccess::deployable_collectible_state_v_2`] method on [`super::RemoteTables`],
/// like `ctx.db.deployable_collectible_state_v_2()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.deployable_collectible_state_v_2().on_insert(...)`.
pub struct DeployableCollectibleStateV2TableHandle<'ctx> {
    imp: __sdk::TableHandle<DeployableCollectibleStateV2>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `deployable_collectible_state_v2`.
///
/// Implemented for [`super::RemoteTables`].
pub trait DeployableCollectibleStateV2TableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`DeployableCollectibleStateV2TableHandle`], which mediates access to the table `deployable_collectible_state_v2`.
    fn deployable_collectible_state_v_2(&self) -> DeployableCollectibleStateV2TableHandle<'_>;
}

impl DeployableCollectibleStateV2TableAccess for super::RemoteTables {
    fn deployable_collectible_state_v_2(&self) -> DeployableCollectibleStateV2TableHandle<'_> {
        DeployableCollectibleStateV2TableHandle {
            imp: self
                .imp
                .get_table::<DeployableCollectibleStateV2>("deployable_collectible_state_v2"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct DeployableCollectibleStateV2InsertCallbackId(__sdk::CallbackId);
pub struct DeployableCollectibleStateV2DeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for DeployableCollectibleStateV2TableHandle<'ctx> {
    type Row = DeployableCollectibleStateV2;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = DeployableCollectibleStateV2> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = DeployableCollectibleStateV2InsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> DeployableCollectibleStateV2InsertCallbackId {
        DeployableCollectibleStateV2InsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: DeployableCollectibleStateV2InsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = DeployableCollectibleStateV2DeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> DeployableCollectibleStateV2DeleteCallbackId {
        DeployableCollectibleStateV2DeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: DeployableCollectibleStateV2DeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache
        .get_or_make_table::<DeployableCollectibleStateV2>("deployable_collectible_state_v2");
    _table.add_unique_constraint::<u64>("deployable_entity_id", |row| &row.deployable_entity_id);
}
pub struct DeployableCollectibleStateV2UpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for DeployableCollectibleStateV2TableHandle<'ctx> {
    type UpdateCallbackId = DeployableCollectibleStateV2UpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> DeployableCollectibleStateV2UpdateCallbackId {
        DeployableCollectibleStateV2UpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: DeployableCollectibleStateV2UpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<DeployableCollectibleStateV2>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse(
            "TableUpdate<DeployableCollectibleStateV2>",
            "TableUpdate",
        )
        .with_cause(e)
        .into()
    })
}

/// Access to the `deployable_entity_id` unique index on the table `deployable_collectible_state_v2`,
/// which allows point queries on the field of the same name
/// via the [`DeployableCollectibleStateV2DeployableEntityIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.deployable_collectible_state_v_2().deployable_entity_id().find(...)`.
pub struct DeployableCollectibleStateV2DeployableEntityIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<DeployableCollectibleStateV2, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> DeployableCollectibleStateV2TableHandle<'ctx> {
    /// Get a handle on the `deployable_entity_id` unique index on the table `deployable_collectible_state_v2`.
    pub fn deployable_entity_id(
        &self,
    ) -> DeployableCollectibleStateV2DeployableEntityIdUnique<'ctx> {
        DeployableCollectibleStateV2DeployableEntityIdUnique {
            imp: self
                .imp
                .get_unique_constraint::<u64>("deployable_entity_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> DeployableCollectibleStateV2DeployableEntityIdUnique<'ctx> {
    /// Find the subscribed row whose `deployable_entity_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<DeployableCollectibleStateV2> {
        self.imp.find(col_val)
    }
}
