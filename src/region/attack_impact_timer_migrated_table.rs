// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::attack_impact_timer_migrated_type::AttackImpactTimerMigrated;
use super::entity_type_type::EntityType;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `attack_impact_timer_migrated`.
///
/// Obtain a handle from the [`AttackImpactTimerMigratedTableAccess::attack_impact_timer_migrated`] method on [`super::RemoteTables`],
/// like `ctx.db.attack_impact_timer_migrated()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.attack_impact_timer_migrated().on_insert(...)`.
pub struct AttackImpactTimerMigratedTableHandle<'ctx> {
    imp: __sdk::TableHandle<AttackImpactTimerMigrated>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `attack_impact_timer_migrated`.
///
/// Implemented for [`super::RemoteTables`].
pub trait AttackImpactTimerMigratedTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`AttackImpactTimerMigratedTableHandle`], which mediates access to the table `attack_impact_timer_migrated`.
    fn attack_impact_timer_migrated(&self) -> AttackImpactTimerMigratedTableHandle<'_>;
}

impl AttackImpactTimerMigratedTableAccess for super::RemoteTables {
    fn attack_impact_timer_migrated(&self) -> AttackImpactTimerMigratedTableHandle<'_> {
        AttackImpactTimerMigratedTableHandle {
            imp: self
                .imp
                .get_table::<AttackImpactTimerMigrated>("attack_impact_timer_migrated"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct AttackImpactTimerMigratedInsertCallbackId(__sdk::CallbackId);
pub struct AttackImpactTimerMigratedDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for AttackImpactTimerMigratedTableHandle<'ctx> {
    type Row = AttackImpactTimerMigrated;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = AttackImpactTimerMigrated> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = AttackImpactTimerMigratedInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> AttackImpactTimerMigratedInsertCallbackId {
        AttackImpactTimerMigratedInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: AttackImpactTimerMigratedInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = AttackImpactTimerMigratedDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> AttackImpactTimerMigratedDeleteCallbackId {
        AttackImpactTimerMigratedDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: AttackImpactTimerMigratedDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table =
        client_cache.get_or_make_table::<AttackImpactTimerMigrated>("attack_impact_timer_migrated");
    _table.add_unique_constraint::<u64>("scheduled_id", |row| &row.scheduled_id);
}
pub struct AttackImpactTimerMigratedUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for AttackImpactTimerMigratedTableHandle<'ctx> {
    type UpdateCallbackId = AttackImpactTimerMigratedUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> AttackImpactTimerMigratedUpdateCallbackId {
        AttackImpactTimerMigratedUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: AttackImpactTimerMigratedUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<AttackImpactTimerMigrated>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<AttackImpactTimerMigrated>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `scheduled_id` unique index on the table `attack_impact_timer_migrated`,
/// which allows point queries on the field of the same name
/// via the [`AttackImpactTimerMigratedScheduledIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.attack_impact_timer_migrated().scheduled_id().find(...)`.
pub struct AttackImpactTimerMigratedScheduledIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<AttackImpactTimerMigrated, u64>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> AttackImpactTimerMigratedTableHandle<'ctx> {
    /// Get a handle on the `scheduled_id` unique index on the table `attack_impact_timer_migrated`.
    pub fn scheduled_id(&self) -> AttackImpactTimerMigratedScheduledIdUnique<'ctx> {
        AttackImpactTimerMigratedScheduledIdUnique {
            imp: self.imp.get_unique_constraint::<u64>("scheduled_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> AttackImpactTimerMigratedScheduledIdUnique<'ctx> {
    /// Find the subscribed row whose `scheduled_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u64) -> Option<AttackImpactTimerMigrated> {
        self.imp.find(col_val)
    }
}
